import traceback
import unittest
from pathlib import Path

import jsonschema
import pytest

from neuroconv.utils import load_dict_from_file
from neuroconv.utils.json_schema import validate_metadata


def test_metadata_schema():
    metadata_schema = load_dict_from_file(
        Path(__file__).parent.parent.parent / "src" / "neuroconv" / "schemas" / "metadata_schema.json"
    )

    metadata = dict(
        NWBFile=dict(
            session_start_time="2020-01-01T00:00:00",
            session_description="Auto-generated by neuroconv",
            identifier="1234",
        ),
        Ophys=dict(
            Devices=[
                dict(
                    name="ImagingDevice",
                ),
            ],
            Fluorescence=dict(
                name="Fluorescence",
                PlaneSegmentationChan1Plane0=dict(
                    raw=dict(name="RoiResponseSeriesChan1Plane0", description="raw fluorescence signal"),
                    deconvolved=dict(name="DeconvolvedChan1Plane0", description="deconvolved fluorescence signal"),
                    neuropil=dict(name="NeuropilChan1Plane0", description="neuropil fluorescence signal"),
                ),
                PlaneSegmentationChan1Plane1=dict(
                    raw=dict(name="RoiResponseSeriesChan1Plane0", description="raw fluorescence signal"),
                    deconvolved=dict(name="DeconvolvedChan1Plane0", description="deconvolved fluorescence signal"),
                    neuropil=dict(name="NeuropilChan1Plane0", description="neuropil fluorescence signal"),
                ),
            ),
            DfOverF=dict(
                name="DfOverF",
                PlaneSegmentationChan1Plane0=dict(
                    dff=dict(name="RoiResponseSeriesChan1Plane0", description="Array of df/F traces."),
                ),
                PlaneSegmentationChan1Plane1=dict(
                    dff=dict(name="RoiResponseSeriesChan1Plane0", description="Array of df/F traces."),
                ),
            ),
            SegmentationImages=dict(
                name="SegmentationImages",
                PlaneSegmentationChan1Plane0=dict(
                    raw=dict(name="PlaneSegmentationChan1Plane0", description="raw segmentation image"),
                    neuropil=dict(name="PlaneSegmentationChan1Plane0", description="neuropil segmentation image"),
                ),
            ),
        ),
    )

    validate_metadata(metadata=metadata, schema=metadata_schema)


invalid_plane_name = "plane_segmentation_chan1_plane0"
name_error = "'name' is a required property"
description_error = "'description' is a required property"
plane_name_error_base = "does not match any of the regexes"
not_enough_properties_error = "does not have enough properties"


def test_invalid_ophys_metadata():
    metadata_schema = load_dict_from_file(
        Path(__file__).parent.parent.parent / "src" / "neuroconv" / "schemas" / "metadata_schema.json"
    )

    metadata = dict(
        NWBFile=dict(
            session_start_time="2020-01-01T00:00:00",
            session_description="Auto-generated by neuroconv",
            identifier="1234",
        ),
        Ophys=dict(
             Devices=[],
            Fluorescence={
                "name": "Fluorescence",
                "fluorescence_chan1_plane0": dict(), # Value Unchecked
                "FluorescenceChan1Plane0": dict(),
                "FluorescenceChan1Plane1": dict(
                    raw=dict(),
                ),
            },
            DFOverF={
                "name": "DfOverF",
                "df_chan1_plane0": dict(), # Value Unchecked
                "DFChan1Plane0": dict(),
                "DFChan1Plane1": dict(
                    raw=dict(),
                ),
            },
            SegmentationImages={
                "name": "SegmentationImages",
                "segmentation_chan1_plane0": dict(), # Value Unchecked
                "SegmentationChan1Plane0": dict(),
                "SegmentationChan1Plane1": dict(
                    raw=dict(),
                ),
            },
        ),
    )

    validator = jsonschema.Draft7Validator(metadata_schema)

    errors = [{ "message": error.message, "path": error.json_path }  for error in validator.iter_errors(metadata)]
    
    def count_matching_elements(arr, condition_func):
            filtered_elements = filter(condition_func, arr)
            return len(list(filtered_elements))
        
    nExpectedErrors = 11
    assert len(errors) == nExpectedErrors

    # One for each of Fluorescence, DFOverF, and SegmentationImages
    assert count_matching_elements(errors, lambda o: f"'fluorescence_chan1_plane0' {plane_name_error_base}" in o["message"]  and o["path"] == "$.Ophys.Fluorescence") == 1
    assert count_matching_elements(errors, lambda o: f"'df_chan1_plane0' {plane_name_error_base}" in o["message"]  and o["path"] == "$.Ophys.DFOverF") == 1
    assert count_matching_elements(errors, lambda o: f"'segmentation_chan1_plane0' {plane_name_error_base}" in o["message"]  and o["path"] == "$.Ophys.SegmentationImages") == 1

    assert count_matching_elements(errors, lambda o: not_enough_properties_error in o["message"] and o["path"] == "$.Ophys.Fluorescence.FluorescenceChan1Plane0") == 1
    assert count_matching_elements(errors, lambda o: not_enough_properties_error in o["message"] and o["path"] == "$.Ophys.DFOverF.DFChan1Plane0") == 1
    assert count_matching_elements(errors, lambda o: not_enough_properties_error in o["message"] and o["path"] == "$.Ophys.SegmentationImages.SegmentationChan1Plane0") == 1
    
    assert count_matching_elements(errors, lambda o: name_error == o["message"] and o["path"] == "$.Ophys.Fluorescence.FluorescenceChan1Plane1.raw") == 1
    assert count_matching_elements(errors, lambda o: name_error == o["message"] and o["path"] == "$.Ophys.DFOverF.DFChan1Plane1.raw") == 1
    assert count_matching_elements(errors, lambda o: name_error == o["message"] and o["path"] == "$.Ophys.SegmentationImages.SegmentationChan1Plane1.raw") == 1

    assert count_matching_elements(errors, lambda o: description_error == o["message"] and o["path"] == "$.Ophys.Fluorescence.FluorescenceChan1Plane1.raw") == 1
    assert count_matching_elements(errors, lambda o: description_error == o["message"] and o["path"] == "$.Ophys.DFOverF.DFChan1Plane1.raw") == 1

def test_invalid_ophys_plane_metadata():
    metadata_schema = load_dict_from_file(
        Path(__file__).parent.parent.parent / "src" / "neuroconv" / "schemas" / "metadata_schema.json"
    )


    # Just a name is not enough
    metadata = dict(
        NWBFile=dict(
            session_start_time="2020-01-01T00:00:00",
            session_description="Auto-generated by neuroconv",
            identifier="1234",
        ),
        Ophys=dict(
             Devices=[],
            Fluorescence={"name": "Fluorescence"},
            DFOverF={"name": "DfOverF"},
            SegmentationImages={"name": "SegmentationImages"},
        ),
    )

    validator = jsonschema.Draft7Validator(metadata_schema)

    errors = [{ "message": error.message, "path": error.json_path }  for error in validator.iter_errors(metadata)]

    def count_matching_elements(arr, condition_func):
        filtered_elements = filter(condition_func, arr)
        return len(list(filtered_elements))

    nExpectedErrors = 3
    assert len(errors) == nExpectedErrors

    # One for each of Fluorescence, DFOverF, and SegmentationImages
    assert count_matching_elements(errors, lambda o: not_enough_properties_error in o["message"] and o["path"] == "$.Ophys.Fluorescence") == 1 
    assert count_matching_elements(errors, lambda o: not_enough_properties_error in o["message"] and o["path"] == "$.Ophys.DFOverF") == 1
    assert count_matching_elements(errors, lambda o: not_enough_properties_error in o["message"] and o["path"] == "$.Ophys.SegmentationImages") == 1

    # Adding a single plane removes the errors
    metadata["Ophys"]["Fluorescence"].update({
        "FluorescenceChan1Plane1": dict(
            raw=dict(name="FluorescenceChan1Plane0", description="basic description"),
        ),
    })
    metadata["Ophys"]["DFOverF"].update({
        "DFChan1Plane1": dict(
            raw=dict(name="DFChan1Plane0", description="basic description"),
        ),
    })

    metadata["Ophys"]["SegmentationImages"].update({
        "SegmentationChan1Plane1": dict(
            raw=dict(name="SegmentationChan1Plane0", description="basic description"),
        ),
    })

    errors = list(map(lambda e: str(e).split("\n")[0], validator.iter_errors(metadata)))
    assert len(errors) == 0
