import traceback
import unittest
from pathlib import Path

import jsonschema
import pytest

from neuroconv.utils import load_dict_from_file
from neuroconv.utils.json_schema import validate_metadata


def test_metadata_schema():
    metadata_schema = load_dict_from_file(
        Path(__file__).parent.parent.parent / "src" / "neuroconv" / "schemas" / "metadata_schema.json"
    )

    metadata = dict(
        NWBFile=dict(
            session_start_time="2020-01-01T00:00:00",
            session_description="Auto-generated by neuroconv",
            identifier="1234",
        ),
        Ophys=dict(
            Devices=[
                dict(
                    name="ImagingDevice",
                ),
            ],
            Fluorescence=dict(
                name="Fluorescence",
                PlaneSegmentationChan1Plane0=dict(
                    raw=dict(name="RoiResponseSeriesChan1Plane0", description="raw fluorescence signal"),
                    deconvolved=dict(name="DeconvolvedChan1Plane0", description="deconvolved fluorescence signal"),
                    neuropil=dict(name="NeuropilChan1Plane0", description="neuropil fluorescence signal"),
                ),
                PlaneSegmentationChan1Plane1=dict(
                    raw=dict(name="RoiResponseSeriesChan1Plane0", description="raw fluorescence signal"),
                    deconvolved=dict(name="DeconvolvedChan1Plane0", description="deconvolved fluorescence signal"),
                    neuropil=dict(name="NeuropilChan1Plane0", description="neuropil fluorescence signal"),
                ),
            ),
            DfOverF=dict(
                name="DfOverF",
                PlaneSegmentationChan1Plane0=dict(
                    dff=dict(name="RoiResponseSeriesChan1Plane0", description="Array of df/F traces."),
                ),
                PlaneSegmentationChan1Plane1=dict(
                    dff=dict(name="RoiResponseSeriesChan1Plane0", description="Array of df/F traces."),
                ),
            ),
            SegmentationImages=dict(
                name="SegmentationImages",
                PlaneSegmentationChan1Plane0=dict(
                    raw=dict(name="PlaneSegmentationChan1Plane0", description="raw segmentation image"),
                    neuropil=dict(name="PlaneSegmentationChan1Plane0", description="neuropil segmentation image"),
                ),
            ),
        ),
    )

    validate_metadata(metadata=metadata, schema=metadata_schema)


def test_invalid_ophys_metadata():
    metadata_schema = load_dict_from_file(
        Path(__file__).parent.parent.parent / "src" / "neuroconv" / "schemas" / "metadata_schema.json"
    )

    invalid_plane_name = "plane_segmentation_chan1_plane0"

    def create_valid_plane_name(name: str, number=0):
        return f'{"".join(map(lambda str: str.capitalize(), name.split("_")))[:-1]}{str(number)}'

    print(create_valid_plane_name(invalid_plane_name))

    metadata = dict(
        NWBFile=dict(
            session_start_time="2020-01-01T00:00:00",
            session_description="Auto-generated by neuroconv",
            identifier="1234",
        ),
        Ophys=dict(
            Fluorescence={
                "name": "Fluorescence",
                invalid_plane_name: dict(
                    raw=dict(),  # Not Checked
                ),
                create_valid_plane_name(invalid_plane_name): dict(),
                create_valid_plane_name(invalid_plane_name, 1): dict(
                    raw=dict(),
                ),
            },
            DFOverF={
                "name": "DfOverF",
                invalid_plane_name: dict(),  # Not Checked
                create_valid_plane_name(invalid_plane_name): dict(),
                create_valid_plane_name(invalid_plane_name, 1): dict(
                    raw=dict(),
                ),
            },
            SegmentationImages={
                "name": "SegmentationImages",
                invalid_plane_name: dict(),  # Not Checked
                create_valid_plane_name(invalid_plane_name): dict(),
                create_valid_plane_name(invalid_plane_name, 1): dict(
                    raw=dict(),
                ),
            },
        ),
    )

    # jsonschema.validate(instance=metadata, schema=metadata_schema)
    validator = jsonschema.Draft7Validator(metadata_schema)

    errors = list(map(lambda e: str(e).split("\n")[0], validator.iter_errors(metadata)))

    print(errors)
    iterable = iter(errors)
    nExpectedErrors = 12
    assert len(errors) == nExpectedErrors

    name_error = "'name' is a required property"
    description_error = "'description' is a required property"
    plane_name_error = f"'{invalid_plane_name}' does not match any of the regexes"
    not_enough_properties_error = "does not have enough properties"

    assert "'Devices' is a required property" == next(iterable, None)

    # Fluorescence
    assert not_enough_properties_error in next(iterable, "")
    assert name_error == next(iterable, None)
    assert description_error == next(iterable, None)
    assert plane_name_error in next(iterable, "")

    # DfOverF
    assert not_enough_properties_error in next(iterable, "")
    assert name_error == next(iterable, None)
    assert description_error == next(iterable, None)
    assert plane_name_error in next(iterable, "")

    # SegmentationImages
    assert not_enough_properties_error in next(iterable, "")
    assert name_error == next(iterable, None)
    assert plane_name_error in next(iterable, "")
