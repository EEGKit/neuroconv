"""Authors: Cody Baker and Ben Dichter."""
import uuid
from abc import abstractmethod, ABC
from typing import Optional

from pynwb import NWBFile

from .utils import get_base_schema, get_schema_from_method_signature, ArrayType


class BaseDataInterface(ABC):
    """Abstract class defining the structure of all DataInterfaces."""

    @classmethod
    def get_source_schema(cls):
        """Infer the JSON schema for the source_data from the method signature (annotation typing)."""
        return get_schema_from_method_signature(cls.__init__, exclude=["source_data"])

    @classmethod
    def get_conversion_options_schema(cls):
        """Infer the JSON schema for the conversion options from the method signature (annotation typing)."""
        return get_schema_from_method_signature(cls.run_conversion, exclude=["nwbfile", "metadata"])

    def __init__(self, **source_data):
        self.source_data: dict = source_data

    def get_metadata_schema(self):
        """Retrieve JSON schema for metadata."""
        metadata_schema = get_base_schema(
            id_="metadata.schema.json",
            root=True,
            title="Metadata",
            description="Schema for the metadata",
            version="0.1.0",
        )
        return metadata_schema

    def get_metadata(self):
        """Child DataInterface classes should override this to match their metadata."""
        metadata = dict(
            NWBFile=dict(
                session_description="Auto-generated by neuroconv",
                identifier=str(uuid.uuid4()),
            ),
        )

        return metadata

    @abstractmethod
    def synchronize_starting_time(self, starting_time: float):
        """
        Synchronize the start of all time references for this interface to the common time basis.

        Must be in units seconds relative to the common 'session_start_time'.

        Parameters
        ----------
        starting_time: float
            The starting time for all temporal data in this interface.
        """
        raise NotImplementedError(
            "The protocol for synchronizing the start time of this interface has not been specified!"
        )

    @abstractmethod
    def synchronize_timestamps(self, timestamps: ArrayType):
        """
        Replace all time references for this interface with the timestamps from the common time basis.

        Must be in units seconds relative to the common 'session_start_time'.

        Parameters
        ----------
        timestamps: ArrayType
            A full vector of timestamps all temporal data in this interface.
        """
        raise NotImplementedError(
            "The protocol for synchronizing the timestamps of this interface has not been specified!"
        )

    @abstractmethod
    def synchronize_with_pulses(self, pulse_timestamps: ArrayType):
        """
        Synchronize time references which occur between the known pulse timestamps which are in the common time basis.

        An example could be a metronomic TTL pulse (e.g., every second) from a secondary data stream to the primary
        timing system; if the time references of this interface are recorded within the relative time of the secondary
        data stream, then their exact time in the primary system is inferred given the pulse times.

        Must be in units seconds relative to the common 'session_start_time'.

        Parameters
        ----------
        timestamps: ArrayType
            A full vector of timestamps all temporal data in this interface.
        """
        raise NotImplementedError(
            "The protocol for synchronizing the timestamps of this interface given pulse times has not been specified!"
        )

    def get_conversion_options(self):
        """Child DataInterface classes should override this to match their conversion options."""
        return dict()

    @abstractmethod
    def run_conversion(
        self,
        nwbfile_path: Optional[str] = None,
        nwbfile: Optional[NWBFile] = None,
        metadata: Optional[dict] = None,
        overwrite: bool = False,
        **conversion_options,
    ):
        """
        Run the NWB conversion for the instantiated data interface.

        Parameters
        ----------
        nwbfile_path: FilePathType
            Path for where to write or load (if overwrite=False) the NWBFile.
            If specified, the context will always write to this location.
        nwbfile: NWBFile, optional
            An in-memory NWBFile object to write to the location.
        metadata: dict, optional
            Metadata dictionary with information used to create the NWBFile when one does not exist or overwrite=True.
        overwrite: bool, optional
            Whether or not to overwrite the NWBFile if one exists at the nwbfile_path.
            The default is False (append mode).
        verbose: bool, optional
            If 'nwbfile_path' is specified, informs user after a successful write operation.
            The default is True.
        """
        raise NotImplementedError("The run_conversion method for this DataInterface has not been defined!")
